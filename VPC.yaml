AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc with public and private subnets

# The following metadata is used to group the parameters
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation

# Parameters are used to to build flexible CloudFormation templates
Parameters:
  InstanceType:
    Type: String
    Description: Choosing  t2 micro because it is free
    Default: t2.micro
  KeyName:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: pawan-app-deploy
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 3
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.4.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.5.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 3
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

  EnvironmentType: 
      Description: The environment type
      Type: String
      Default: dev
      AllowedValues: 
        - prod
        - dev
      ConstraintDescription: must be a prod or dev

  CPUPolicyTargetValue:
    Type: String
  ALBRequestCountTargetValue:
    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: false
      EnableDnsSupport: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ChatApp-VPC

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ChatApp-IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1A
      VpcId: !Ref VPC

# Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1b
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-2B
      VpcId: !Ref VPC

# Create Public Subnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1c
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-3C 
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Associate Public Subnet3 with Public Route Table
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1a
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-1A
      VpcId: !Ref VPC

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1b
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-2B
      VpcId: !Ref VPC

# Create Private Subnet3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1c
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-3C
      VpcId: !Ref VPC

  NatGateway:
      Type: "AWS::EC2::NatGateway"
      DependsOn: NatPublicIP
      Properties: 
        AllocationId: !GetAtt NatPublicIP.AllocationId
        SubnetId: !Ref PublicSubnet1
     
  NatPublicIP:
      Type: "AWS::EC2::EIP"
      DependsOn: VPC
      Properties:
        Domain: VPC

# Create Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private Route Table
      VpcId: !Ref VPC

# Add a Private Route to the Route Table
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

# Associate Private Subnet1 with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

# Associate Private Subnet2 with Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

# Associate Private Subnet3 with Private Route Table
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

# Create Security Group for the Application Load Balancer 
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/8000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

# Create Security Group for the Bastion Host aka Jump Box
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC

# Create Security Group for FrontEnd
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/8000 locked down to the load balancer SG + SSH access via port 22 locked down SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: FrontEnd-Security-Group
      VpcId: !Ref VPC

# Create Security Group for the BackEnd
  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: BackEnd-Security-Group
      VpcId: !Ref VPC

# Create FronEnd  Static Instance
  clientInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
       ImageId: ami-0afa4cc18711e75a9
       InstanceType: !Ref InstanceType
       KeyName: !Ref KeyName
       Tags:
         - Key: Name
           Value: ChatApp-FrontEnd-CF
       NetworkInterfaces:
       - DeviceIndex: 0
         AssociatePublicIpAddress: true
         SubnetId: !Ref PublicSubnet1
         GroupSet: 
         - !Ref WebServerSecurityGroup

# Create BackEnd Static Instance    
  serverInstance:
     Type: 'AWS::EC2::Instance'
     Properties: 
        ImageId: ami-0e779c0552973a351
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        Tags:
          - Key: Name
            Value: ChatApp-BackEnd-CF
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          SubnetId: !Ref PrivateSubnet2
          GroupSet: 
          - !Ref DataBaseSecurityGroup

#BackEnd ASG Creation :
  BackEndLBSG:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupDescription: Enable HTTP access
        SecurityGroupIngress:
          - IpProtocol: 'tcp'
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8000
            ToPort: 8000
            CidrIp: "0.0.0.0/0"
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: "0.0.0.0/0"
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: "0.0.0.0/0"
        Tags:
          - Key: Name
            Value: BackEnd-LB-SG
   
  BackEndLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Scheme: internal
        SecurityGroups:
          - !Ref BackEndLBSG
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet3
        Tags:
          - Key: Name
            Value: BackEnd-LB
        Type: application

  BackEndLoadBalancerListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref BackEndTargetGroup
            Type: forward
        LoadBalancerArn: !Ref BackEndLoadBalancer
        Port: 8000
        Protocol: HTTP
  BackEndTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        Name: BackEndTargetGroup
        Port: 8000
        Protocol: HTTP
        VpcId: !Ref VPC
  BackEndLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: ami-0e779c0552973a351
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
          - !Ref DataBaseSecurityGroup 
  BackEndASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        MaxSize: '2'
        MinSize: '1'
        VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet3
        DesiredCapacity: 1
        LaunchConfigurationName: !Ref BackEndLaunchConfig
        TargetGroupARNs:
          - !Ref BackEndTargetGroup
        MaxSize: 2
        MinSize: 1
        Tags:
          - Key: Name
            Value: BackEnd-ASG
            PropagateAtLaunch: True
  BackEndCPUPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref BackEndASG
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ASGAverageCPUUtilization
          TargetValue: 80

# FrontEnd ASG Creation :
  FrontEndLBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: FrontEnd-LB-SG
 
  FrontEndLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FrontEndLBSG
      Subnets:
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: FrontEnd-LB
      Type: application

  FrontEndLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontEndTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontEndLoadBalancer
      Port: 80
      Protocol: HTTP
  FrontEndTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: FrontEndTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  FrontEndLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-046f1780e0301370c
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebServerSecurityGroup 
  FrontEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: '2'
      MinSize: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref FrontEndLaunchConfig
      TargetGroupARNs:
        - !Ref FrontEndTargetGroup
      MaxSize: 2
      MinSize: 1
      Tags:
        - Key: Name
          Value: FrontEnd-ASG
          PropagateAtLaunch: True
  FrontEndCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontEndASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80

# OutPut
Outputs:
# Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

# Export Public Subnet 1 
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

# Export Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

# Export Public Subnet 3
  PublicSubnet3:
    Description: Public-Subnet-3C ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3

# Export Private Subnet 1
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1

# Export Private Subnet 2
  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2

# Export Private Subnet 3
  PrivateSubnet3:
    Description: Private Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
    Value: !Ref PrivateSubnet3

# Export ALB Security Group ID
  ALBSecurityGroup:
    Description: Application Load Balancer Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

# Export SSH Security Group ID
  SSHSecurityGroup:
    Description: SSH Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup

# Export WebServer Security Group ID
  WebServerSecurityGroup:
    Description: Webserver Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup

# Export DataBase Security Group ID
  DataBaseSecurityGroup:
    Description: DataBase Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
    Value: !Ref DataBaseSecurityGroup

# # AutoScaling Backend Output
  BackALBDNS:
    Description: Web App ALB DNS Name 
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - Fn::GetAtt: FrontEndLoadBalancer.DNSName
        
# # # AutoScaling Frontend Output
  FrontEndLBDNS:
    Description: Web App ALB DNS Name 
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - Fn::GetAtt: FrontEndLoadBalancer.DNSName
